"""
Simple example of Variational Inference.

We have known data X_0 (in a Linear G space).
We observe some single X that is generated by G_0(X_0) by unknown G_0.
We have given likelihood model:
p(X|G) = N(X | G(X_0), sigma)

Now we do VI to infer p(G|X), so we optimise the ELBO:
for variational family q(G) and uniform prior:

E_{G \sim q) \log p(X|G) - log q(G)

As variational family, we use a Gaussian on the algebra.
"""
import math
import torch
import torch.nn as nn

from relie.experiments.vi.flow_distribution import Flow, FlowDistribution
from relie.experiments.vi.pushed_gaussian_distribution import PushedGaussianDistribution
from relie.lie_distr import SO3Prior
from relie.utils.so3_tools import so3_log, so3_vee

torch.manual_seed(0)
x_zero = torch.randn(100, 3, dtype=torch.double)
g_zero = SO3Prior(dtype=torch.double).sample((1,))[0]
g_zero_alg = so3_vee(so3_log(g_zero))
x = (g_zero @ x_zero.t()).t()


def prediction_loss_fn(g, x, x_zero):
    """
    Prediction loss = -log p(X|G)
    Allows for batching in G.
    :param g: Group shape (..., 3, 3)
    :param x: (n, 3)
    :param x_zero: (n, 3)
    :return: (...,)
    """
    d = (x.t() - (g[..., None, :] @ x_zero.t())[..., :, 0, :])
    return d.pow(2).sum(-1).sum(-1)


class VIModel(nn.Module):
    def __init__(self, distr):
        super().__init__()
        self.distr = distr

    def forward(self, x, x_zero):
        distr = self.distr()
        g = distr.rsample((64,))

        prediction_loss = prediction_loss_fn(g, x, x_zero).float()
        entropy = -distr.log_prob(g)
        loss = prediction_loss - entropy
        return loss


flow = Flow(3, 4)
flow_distr = FlowDistribution(flow, math.pi * 1.1)
gaussian_distr = PushedGaussianDistribution(lie_multiply=True)
model = VIModel(gaussian_distr)
optimizer = torch.optim.Adam(model.parameters())

for it in range(10000):
    loss = model(x, x_zero).mean()
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()

    if it % 1000 == 0:
        print(f"Loss: {loss.item()}.")
        # print(f"Parameters: {torch.cat([model.loc, model.scale]).tolist()}")
        # print(f"Target at {g_zero_alg.tolist()}")

